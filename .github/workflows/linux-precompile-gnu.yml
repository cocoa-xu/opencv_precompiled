name: linux-precompile-gnu

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mix_compile:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              arch: x86_64-linux-gnu
              cmake_toolchain_file: ""
              c_compiler: gcc
              cpp_compiler: g++
              deb_arch: amd64
          - pair:
              arch: i686-linux-gnu
              cmake_toolchain_file: cc_toolchain/i686-linux-gnu.cmake
              c_compiler: gcc-i686-linux-gnu
              cpp_compiler: g++-i686-linux-gnu
              deb_arch: i386
          - pair:
              arch: aarch64-linux-gnu
              cmake_toolchain_file: cc_toolchain/aarch64-linux-gnu.cmake
              c_compiler: gcc-aarch64-linux-gnu
              cpp_compiler: g++-aarch64-linux-gnu
              deb_arch: arm64
          - pair:
              arch: armv7l-linux-gnueabihf
              cmake_toolchain_file: cc_toolchain/armv7l-linux-gnueabihf.cmake
              c_compiler: gcc-arm-linux-gnueabihf
              cpp_compiler: g++-arm-linux-gnueabihf
              deb_arch: armhf
          - pair:
              arch: ppc64le-linux-gnu
              cmake_toolchain_file: cc_toolchain/ppc64le-linux-gnu.cmake
              c_compiler: gcc-powerpc64le-linux-gnu
              cpp_compiler: g++-powerpc64le-linux-gnu
              deb_arch: ppc64el
          - pair:
              arch: s390x-linux-gnu
              cmake_toolchain_file: cc_toolchain/s390x-linux-gnu.cmake
              c_compiler: gcc-s390x-linux-gnu
              cpp_compiler: g++-s390x-linux-gnu
              deb_arch: s390x
          - pair:
              arch: riscv64-linux-gnu
              cmake_toolchain_file: cc_toolchain/riscv64-linux-gnu.cmake
              c_compiler: gcc-riscv64-linux-gnu
              cpp_compiler: g++-riscv64-linux-gnu
              deb_arch: riscv64

    steps:
      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git gzip python3 ca-certificates ${{ matrix.pair.c_compiler }} ${{ matrix.pair.cpp_compiler }} libncurses5-dev libssl-dev

      - name: Cache OpenCV Source Code
        id: cache-opencv
        uses: actions/cache@v3
        with:
          key: opencv-${{ env.OPENCV_VER }}
          path: |
            ./src/cache
            ./src/opencv

      - name: Download OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: |
          bash scripts/download_opencv.sh ${OPENCV_VER} src/cache src/opencv/

      - name: Compile
        if: steps.cache-mix-compile.outputs.cache-hit != 'true'
        run: |
          if [ "${{ matrix.pair.cmake_toolchain_file }}" != "" ]; then
            export CMAKE_TOOLCHAIN_FILE="$(pwd)/${{ matrix.pair.cmake_toolchain_file }}"
          fi
          echo "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}"
          mkdir -p build
          cd build
          DEFAULT_JOBS=`nproc` make

      - name: Create precompiled archive
        run: |
          export PKG_NAME=opencv_${{ matrix.pair.arch }}-${GITHUB_REF##*/v}
          tar -czf "${PKG_NAME}.tar.gz" "precompiled"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz
