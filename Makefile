ifdef CMAKE_TOOLCHAIN_FILE
	CMAKE_CONFIGURE_FLAGS=-D CMAKE_TOOLCHAIN_FILE="$(CMAKE_TOOLCHAIN_FILE)"
endif

CMAKE_BUILD_TYPE ?= Release
OPENCV_VER ?= 4.6.0
OPENCV_ROOT_DIR = $(shell pwd)/src/opencv
OPENCV_DIR = $(OPENCV_ROOT_DIR)/opencv-$(OPENCV_VER)
OPENCV_CONFIGURATION_PRIVATE_HPP = $(OPENCV_DIR)/modules/core/include/opencv2/core/utils/configuration.private.hpp
PYTHON3_EXECUTABLE = $(shell which python3)
CMAKE_OPENCV_BUILD_DIR = $(shell pwd)/cmake_opencv_$(OPENCV_VER)
CMAKE_OPENCV_MODULE_SELECTION ?= -D BUILD_opencv_python2=OFF \
-D BUILD_opencv_python3=OFF \
-D BUILD_opencv_gapi=OFF
CMAKE_OPENCV_IMG_CODER_SELECTION ?= -D BUILD_PNG=ON \
-D BUILD_JPEG=ON \
-D BUILD_TIFF=ON \
-D BUILD_WEBP=ON \
-D BUILD_OPENJPEG=ON \
-D BUILD_JASPER=ON \
-D BUILD_OPENEXR=ON
CMAKE_OPENCV_OPTIONS ?= ""
DEFAULT_JOBS ?= 1
MAKE_BUILD_FLAGS ?= -j$(DEFAULT_JOBS)
CMAKE_OPTIONS ?= $(CMAKE_OPENCV_MODULE_SELECTION) $(CMAKE_OPENCV_IMG_CODER_SELECTION)
CMAKE_OPTIONS += $(CMAKE_CONFIGURE_FLAGS) $(CMAKE_OPENCV_OPTIONS)
ifdef TARGET_GCC_FLAGS
    CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS="$(TARGET_GCC_FLAGS)" -DCMAKE_C_FLAGS="$(TARGET_GCC_FLAGS)"
endif
ENABLED_CV_MODULES ?= ""
# precompiled binaries
PRECOMPILED_DIR ?= $(shell pwd)/precompiled
HEADERS_TXT = $(CMAKE_OPENCV_BUILD_DIR)/modules/python_bindings_generator/headers.txt
HEADERS_TXT_OUT = $(PRECOMPILED_DIR)/headers.txt
CONFIGURATION_PRIVATE_HPP_OUT = $(PRECOMPILED_DIR)/configuration.private.hpp

.DEFAULT_GLOBAL := build

build: $(HEADERS_TXT_OUT)
	@echo > /dev/null

$(OPENCV_CONFIGURATION_PRIVATE_HPP):
	@ scripts/download_opencv.sh $(OPENCV_VER) src/cache src/opencv/

$(CONFIGURATION_PRIVATE_HPP_OUT): $(OPENCV_CONFIGURATION_PRIVATE_HPP)
	@ mkdir -p "$(PRECOMPILED_DIR)"
	@ cp "$(OPENCV_CONFIGURATION_PRIVATE_HPP)" "$(CONFIGURATION_PRIVATE_HPP_OUT)"

$(HEADERS_TXT): $(CONFIGURATION_PRIVATE_HPP_OUT)
	@ mkdir -p "$(PRECOMPILED_DIR)" && \
	python3 "$(shell pwd)/patches/apply_patch.py" "$(OPENCV_DIR)" "$(OPENCV_VER)" ; \
	mkdir -p "$(CMAKE_OPENCV_BUILD_DIR)" && \
	cd "$(CMAKE_OPENCV_BUILD_DIR)" && \
	cmake -D CMAKE_BUILD_TYPE="$(CMAKE_BUILD_TYPE)" \
		-D CMAKE_INSTALL_PREFIX="$(PRECOMPILED_DIR)" \
		-D PYTHON3_EXECUTABLE="$(PYTHON3_EXECUTABLE)" \
		-D INSTALL_PYTHON_EXAMPLES=OFF \
		-D INSTALL_C_EXAMPLES=OFF \
		-D BUILD_EXAMPLES=OFF \
		-D BUILD_TESTS=OFF \
		-D BUILD_PERF_TESTS=OFF \
		-D BUILD_opencv_java=OFF \
		-D BUILD_opencv_gapi=OFF \
		-D BUILD_opencv_world=OFF \
		-D OPENCV_ENABLE_NONFREE=OFF \
		-D OPENCV_GENERATE_PKGCONFIG=ON \
		-D OPENCV_PC_FILE_NAME=opencv4.pc \
		-D BUILD_ZLIB=ON \
		-D BUILD_opencv_gapi=OFF \
		-D CMAKE_C_FLAGS=-DPNG_ARM_NEON_OPT=0 \
		-D CMAKE_CXX_FLAGS=-DPNG_ARM_NEON_OPT=0 \
		-D CMAKE_TOOLCHAIN_FILE="$(TOOLCHAIN_FILE)" \
		$(CMAKE_OPTIONS) "$(OPENCV_DIR)" && \
	make "$(MAKE_BUILD_FLAGS)" && \
	make install

$(HEADERS_TXT_OUT): $(HEADERS_TXT)
	@ cp "$(HEADERS_TXT)" "$(HEADERS_TXT_OUT)"
	@ if [ -x "$(which gsed)" ]; then \
		gsed -i 's#$(OPENCV_DIR)/modules/#precompiled/include/opencv4/opencv2/#g' "$(HEADERS_TXT_OUT)" ; \
	else \
		sed -i 's#$(OPENCV_DIR)/modules/#precompiled/include/opencv4/opencv2/#g' "$(HEADERS_TXT_OUT)" ; \
	fi
